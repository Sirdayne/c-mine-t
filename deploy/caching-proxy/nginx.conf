
user root;

daemon off;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Include files with config snippets into the root context.
include /etc/nginx/conf.d/*.conf;

events {

	# The maximum number of simultaneous connections that can be opened by
	# a worker process.
	worker_connections 1024;
}

http {

	# Includes mapping of file name extensions to MIME types of responses
	# and defines the default type.
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Name servers used to resolve names of upstream servers into addresses.
	# It's also needed when using tcpsocket and udpsocket in Lua modules.
	#resolver 1.1.1.1 1.0.0.1 2606:4700:4700::1111 2606:4700:4700::1001;

	# Don't tell nginx version to the clients. Default is 'on'.
	server_tokens off;

	# Specifies the maximum accepted body size of a client request, as
	# indicated by the request header Content-Length. If the stated content
	# length is greater than this size, then the client receives the HTTP
	# error code 413. Set to 0 to disable. Default is '1m'.
	client_max_body_size 1m;

	# Sendfile copies data between one FD and other from within the kernel,
	# which is more efficient than read() + write(). Default is off.
	sendfile on;

	# Causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames. Default is 'off'.
	tcp_nopush on;

	# Enables the specified protocols. Default is TLSv1 TLSv1.1 TLSv1.2.
	# TIP: If you're not obligated to support ancient clients, remove TLSv1.1.
	ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;

	# Path of the file with Diffie-Hellman parameters for EDH ciphers.
	# TIP: Generate with: `openssl dhparam -out /etc/ssl/nginx/dh2048.pem 2048`
	#ssl_dhparam /etc/ssl/nginx/dh2048.pem;

	# Specifies that our cipher suits should be preferred over client ciphers.
	# Default is 'off'.
	ssl_prefer_server_ciphers on;

	# Enables a shared SSL cache with size that can hold around 8000 sessions.
	# Default is 'none'.
	ssl_session_cache shared:SSL:2m;

	# Specifies a time during which a client may reuse the session parameters.
	# Default is '5m'.
	ssl_session_timeout 1h;

	# Disable TLS session tickets (they are insecure). Default is 'on'.
	ssl_session_tickets off;

	gzip_vary on;

	# Helper variable for proxying websockets.
	map $http_upgrade $connection_upgrade {
		default upgrade;
		'' close;
	}

  map $uri $proxy_cache_zone {
    default off;
    "~\.(css|gif|jpg|js|png|ico|otf|sng|xls|doc|exe|jpeg|tgx|map|webp|avif)$" static;
    "~^/_nuxt" static;
    "~^/news" off;
    "/" ssr;
  }

  map $proxy_cache_zone $expires {
    default off;
    static max;
  }

  map $proxy_cache_zone $loggable {
    default 1;
    static 0;
  }

  # Cloudflare cache by device type
  # more on https://developers.cloudflare.com/automatic-platform-optimization/reference/cache-device-type/
  map $http_user_agent $cf_device_type {
    default desktop;
    "~(?:phone|windows\s+phone|ipod|blackberry|(?:android|bb\d+|meego|silk|googlebot) .+? mobile|palm|windows\s+ce|opera\ mini|avantgo|mobilesafari|docomo)" mobile;
    "~(?:ipad|playbook|(?:android|bb\d+|meego|silk)(?! .+? mobile))" tablet;
  }

  proxy_cache_path /tmp/nginx-cache-static levels=1:2 keys_zone=static:10m max_size=1g;
  proxy_cache_path /tmp/nginx-cache-ssr levels=1:2 keys_zone=ssr:5m max_size=1g;
  # default nginx cache key + cloudflare device type
  # more on http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_key
  proxy_cache_key $scheme$proxy_host$request_uri$cf_device_type;

	server {
		listen 3000 default_server;
		listen [::]:3000 default_server;

		gzip on;
		gzip_types text/plain application/xml text/css application/javascript text/html;
		gzip_min_length 1000;

    access_log /var/log/nginx/access.log combined if=$loggable;

    if ($arg_bypass) {
      set $proxy_cache_zone off;
    }

    proxy_buffering on;
    proxy_cache $proxy_cache_zone;
    proxy_cache_use_stale error timeout invalid_header updating http_429 http_502 http_503 http_504;

    add_header X-Duke-Nginx-Cache-Zone $proxy_cache_zone always;

		location / {
		  proxy_cache $proxy_cache_zone;
		  proxy_cache_valid 200 5m;
		  expires $expires;

			proxy_redirect off;
			proxy_set_header CF-Device-Type $cf_device_type;
			proxy_set_header Host $host;
			proxy_set_header X-Real-IP $remote_addr;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_pass http://127.0.0.1:3001; # duke node.js runs on 3001 port
		}
	}
}
